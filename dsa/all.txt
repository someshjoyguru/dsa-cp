int largestRectangleArea(vector < int > & histo) {
    stack < int > st;
    int maxA = 0;
    int n = histo.size();
    for (int i = 0; i <= n; i++) {
    while (!st.empty() && (i == n || histo[st.top()] >= histo[i])) {
        int height = histo[st.top()];
        st.pop();
        int width;
        if (st.empty())
        width = i;
        else
        width = i - st.top() - 1;
        maxA = max(maxA, width * height);
    }
    st.push(i);
    }
    return maxA;
}

change in order of solving subproblem changes the answer - Partition DP

class matrixMultiplication{
public:
    int f(int arr[], int i, int j){
        if (i==j) return 0;
        int mini = INT_MAX;
        for (int k=i; k<j; k++){
            int temp = f(arr,i,k) + f(arr,k+1,j) + arr[i-1]*arr[k]*arr[j];
            mini=min(mini, temp);
        }
        return mini;
    }
    int matrixMultiplication(int N, int arr[])
    {
        //here order of solving subproblems determines/changes the answer - Partion DP
        int i=1, j=N-1;
        return f(arr, i, j);
    }
};